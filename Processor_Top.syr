Release 14.7 - xst P.20131013 (nt64)
Copyright (c) 1995-2013 Xilinx, Inc.  All rights reserved.
--> Parameter TMPDIR set to xst/projnav.tmp


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.15 secs
 
--> Parameter xsthdpdir set to xst


Total REAL time to Xst completion: 0.00 secs
Total CPU time to Xst completion: 0.15 secs
 
--> Reading design: Processor_Top.prj

TABLE OF CONTENTS
  1) Synthesis Options Summary
  2) HDL Compilation
  3) Design Hierarchy Analysis
  4) HDL Analysis
  5) HDL Synthesis
     5.1) HDL Synthesis Report
  6) Advanced HDL Synthesis
     6.1) Advanced HDL Synthesis Report
  7) Low Level Synthesis
  8) Partition Report
  9) Final Report
	9.1) Device utilization summary
	9.2) Partition Resource Summary
	9.3) TIMING REPORT


=========================================================================
*                      Synthesis Options Summary                        *
=========================================================================
---- Source Parameters
Input File Name                    : "Processor_Top.prj"
Input Format                       : mixed
Ignore Synthesis Constraint File   : NO

---- Target Parameters
Output File Name                   : "Processor_Top"
Output Format                      : NGC
Target Device                      : xc3s100e-5-cp132

---- Source Options
Top Module Name                    : Processor_Top
Automatic FSM Extraction           : YES
FSM Encoding Algorithm             : Auto
Safe Implementation                : No
FSM Style                          : LUT
RAM Extraction                     : Yes
RAM Style                          : Auto
ROM Extraction                     : Yes
Mux Style                          : Auto
Decoder Extraction                 : YES
Priority Encoder Extraction        : Yes
Shift Register Extraction          : YES
Logical Shifter Extraction         : YES
XOR Collapsing                     : YES
ROM Style                          : Auto
Mux Extraction                     : Yes
Resource Sharing                   : YES
Asynchronous To Synchronous        : NO
Multiplier Style                   : Auto
Automatic Register Balancing       : No

---- Target Options
Add IO Buffers                     : YES
Global Maximum Fanout              : 500
Add Generic Clock Buffer(BUFG)     : 24
Register Duplication               : YES
Slice Packing                      : YES
Optimize Instantiated Primitives   : NO
Use Clock Enable                   : Yes
Use Synchronous Set                : Yes
Use Synchronous Reset              : Yes
Pack IO Registers into IOBs        : Auto
Equivalent register Removal        : YES

---- General Options
Optimization Goal                  : Speed
Optimization Effort                : 1
Keep Hierarchy                     : No
Netlist Hierarchy                  : As_Optimized
RTL Output                         : Yes
Global Optimization                : AllClockNets
Read Cores                         : YES
Write Timing Constraints           : NO
Cross Clock Analysis               : NO
Hierarchy Separator                : /
Bus Delimiter                      : <>
Case Specifier                     : Maintain
Slice Utilization Ratio            : 100
BRAM Utilization Ratio             : 100
Verilog 2001                       : YES
Auto BRAM Packing                  : NO
Slice Utilization Ratio Delta      : 5

=========================================================================


=========================================================================
*                          HDL Compilation                              *
=========================================================================
Compiling verilog file "Counter.v" in library work
Compiling verilog file "PulseGen.v" in library work
Module <Counter> compiled
Compiling verilog file "Packet_Gen.v" in library work
Module <PulseGen> compiled
Compiling verilog file "MouseTransmitter.v" in library work
Module <Packet_Gen> compiled
Compiling verilog file "MouseReceiver.v" in library work
Module <MouseTransmitter> compiled
Compiling verilog file "MouseMasterSM.v" in library work
Module <MouseReceiver> compiled
Compiling verilog file "SevenSegmentDisplay.v" in library work
Module <MouseMasterSM> compiled
Compiling verilog file "MouseTransceiver.v" in library work
Module <SevenSegmentDisplay> compiled
Compiling verilog file "IR_Transmitter_SM.v" in library work
Module <MouseTransceiver> compiled
Compiling verilog file "ALU.v" in library work
Module <IR_Transmitter_SM> compiled
Compiling verilog file "Timer.v" in library work
Module <ALU> compiled
Compiling verilog file "ROM.v" in library work
Module <Timer> compiled
Compiling verilog file "RAM.v" in library work
Module <ROM> compiled
Compiling verilog file "Processor.v" in library work
Module <RAM> compiled
Compiling verilog file "IO_Bus_SevenSeg.v" in library work
Module <Processor> compiled
Compiling verilog file "IO_Bus_Mouse.v" in library work
Module <IO_Bus_SevenSeg> compiled
Compiling verilog file "IO_Bus_LEDs.v" in library work
Module <IO_Bus_Mouse> compiled
Compiling verilog file "CarSelect_MainFSM.v" in library work
Module <IO_Bus_LEDs> compiled
Compiling verilog file "Processor_Top.v" in library work
Module <CarSelect_MainFSM> compiled
Module <Processor_Top> compiled
No errors in compilation
Analysis of file <"Processor_Top.prj"> succeeded.
 

=========================================================================
*                     Design Hierarchy Analysis                         *
=========================================================================
Analyzing hierarchy for module <Processor_Top> in library <work>.

Analyzing hierarchy for module <Processor> in library <work> with parameters.
	CHOOSE_OPP = "00000000"
	DE_REFERENCE_0 = "01110010"
	DE_REFERENCE_A = "01110000"
	DE_REFERENCE_B = "01110001"
	DO_MATHS_OPP_0 = "00110010"
	DO_MATHS_OPP_SAVE_IN_A = "00110000"
	DO_MATHS_OPP_SAVE_IN_B = "00110001"
	FUNCTION_CALL = "01100000"
	GET_THREAD_START_ADDR_0 = "11110001"
	GET_THREAD_START_ADDR_1 = "11110010"
	GET_THREAD_START_ADDR_2 = "11110011"
	GOTO = "01010000"
	GOTO_0 = "01010001"
	GOTO_1 = "01010010"
	GOTO_IDLE = "01010100"
	IDLE = "11110000"
	IF_A_EQUALITY_B_GOTO = "01000000"
	IF_A_EQUALITY_B_GOTO_0 = "01000001"
	IF_A_EQUALITY_B_GOTO_1 = "01000010"
	NO_OP = "10000100"
	READ_FROM_MEM_0 = "00010010"
	READ_FROM_MEM_1 = "00010011"
	READ_FROM_MEM_2 = "00010100"
	READ_FROM_MEM_TO_A = "00010000"
	READ_FROM_MEM_TO_B = "00010001"
	RETURN = "01100001"
	WRITE_TO_MEM_0 = "00100010"
	WRITE_TO_MEM_FROM_A = "00100000"
	WRITE_TO_MEM_FROM_B = "00100001"

Analyzing hierarchy for module <RAM> in library <work> with parameters.
	RAMAddrWidth = "00000000000000000000000000000111"
	RAMBaseAddr = "00000000000000000000000000000000"

Analyzing hierarchy for module <ROM> in library <work> with parameters.
	ROMAddrWidth = "00000000000000000000000000001000"

Analyzing hierarchy for module <IO_Bus_SevenSeg> in library <work> with parameters.
	AddrWidth = "00000000000000000000000000000001"
	BaseAddr = "11010000"

Analyzing hierarchy for module <IO_Bus_LEDs> in library <work> with parameters.
	BaseAddr = "11000000"

Analyzing hierarchy for module <Timer> in library <work> with parameters.
	InitialInterruptEnable = "1"
	InitialInterruptRate = "00000000000000000000000001100100"
	TimerBaseAddr = "11110000"

Analyzing hierarchy for module <IO_Bus_Mouse> in library <work> with parameters.
	AddrWidth = "00000000000000000000000000000010"
	BaseAddr = "10100000"

Analyzing hierarchy for module <CarSelect_MainFSM> in library <work> with parameters.
	BLUE = "0010"
	BaseAddr = "10010000"
	GREEN = "0100"
	RED = "1000"
	YELLOW = "0001"

Analyzing hierarchy for module <ALU> in library <work>.

Analyzing hierarchy for module <SevenSegmentDisplay> in library <work>.

Analyzing hierarchy for module <MouseTransceiver> in library <work> with parameters.
	MouseLimitX = "10100000"
	MouseLimitY = "01111000"

Analyzing hierarchy for module <Counter> in library <work> with parameters.
	Counter_Max = "00000000010011000100101101000000"
	Counter_Width = "00000000000000000000000000010111"

Analyzing hierarchy for module <IR_Transmitter_SM> in library <work> with parameters.
	AssertBurstSize = "00000000000000000000000000110000"
	BackwardLeft = "0110"
	BackwardRight = "0101"
	Backwards = "0100"
	CarSelectBurstSize = "00000000000000000000000000011000"
	Counter_Max = "00000000000000000000001010110110"
	Counter_Width = "00000000000000000000000000001010"
	DeAssertBurstSize = "00000000000000000000000000011000"
	ForwardLeft = "1010"
	ForwardRight = "1001"
	Forwards = "1000"
	Gap = "00000000000000000000000000011000"
	IDLE = "0000"
	Left = "0010"
	Pulse_Counter_Width = "00000000000000000000000000001000"
	Right = "0001"
	StartBurstSize = "00000000000000000000000011000000"

Analyzing hierarchy for module <IR_Transmitter_SM> in library <work> with parameters.
	AssertBurstSize = "00000000000000000000000000101100"
	BackwardLeft = "0110"
	BackwardRight = "0101"
	Backwards = "0100"
	CarSelectBurstSize = "00000000000000000000000000101100"
	Counter_Max = "00000000000000000000001010011011"
	Counter_Width = "00000000000000000000000000001010"
	DeAssertBurstSize = "00000000000000000000000000010110"
	ForwardLeft = "1010"
	ForwardRight = "1001"
	Forwards = "1000"
	Gap = "00000000000000000000000000101000"
	IDLE = "0000"
	Left = "0010"
	Pulse_Counter_Width = "00000000000000000000000000001000"
	Right = "0001"
	StartBurstSize = "00000000000000000000000001011000"

Analyzing hierarchy for module <IR_Transmitter_SM> in library <work> with parameters.
	AssertBurstSize = "00000000000000000000000000101111"
	BackwardLeft = "0110"
	BackwardRight = "0101"
	Backwards = "0100"
	CarSelectBurstSize = "00000000000000000000000000101111"
	Counter_Max = "00000000000000000000001010110110"
	Counter_Width = "00000000000000000000000000001010"
	DeAssertBurstSize = "00000000000000000000000000010110"
	ForwardLeft = "1010"
	ForwardRight = "1001"
	Forwards = "1000"
	Gap = "00000000000000000000000000011001"
	IDLE = "0000"
	Left = "0010"
	Pulse_Counter_Width = "00000000000000000000000000001000"
	Right = "0001"
	StartBurstSize = "00000000000000000000000010111111"

Analyzing hierarchy for module <IR_Transmitter_SM> in library <work> with parameters.
	AssertBurstSize = "00000000000000000000000000101100"
	BackwardLeft = "0110"
	BackwardRight = "0101"
	Backwards = "0100"
	CarSelectBurstSize = "00000000000000000000000000010110"
	Counter_Max = "00000000000000000000001001110001"
	Counter_Width = "00000000000000000000000000001010"
	DeAssertBurstSize = "00000000000000000000000000010110"
	ForwardLeft = "1010"
	ForwardRight = "1001"
	Forwards = "1000"
	Gap = "00000000000000000000000000101000"
	IDLE = "0000"
	Left = "0010"
	Pulse_Counter_Width = "00000000000000000000000000001000"
	Right = "0001"
	StartBurstSize = "00000000000000000000000001011000"

Analyzing hierarchy for module <MouseTransmitter> in library <work>.

Analyzing hierarchy for module <MouseReceiver> in library <work>.

Analyzing hierarchy for module <MouseMasterSM> in library <work>.

Analyzing hierarchy for module <PulseGen> in library <work> with parameters.
	Counter_Max = "00000000000000000000001010110110"
	Counter_Width = "00000000000000000000000000001010"

Analyzing hierarchy for module <Packet_Gen> in library <work> with parameters.
	AssertBurstSize = "00000000000000000000000000110000"
	BackwardBurst = "101"
	CarSelectBurst = "010"
	CarSelectBurstSize = "00000000000000000000000000011000"
	DeAssertBurstSize = "00000000000000000000000000011000"
	ForwardBurst = "110"
	GapBurstSize = "00000000000000000000000000011000"
	GapInterval = "000"
	LeftBurst = "100"
	Pulse_Counter_Width = "00000000000000000000000000001000"
	RightBurst = "011"
	StartBurst = "001"
	StartBurstSize = "00000000000000000000000011000000"

Analyzing hierarchy for module <PulseGen> in library <work> with parameters.
	Counter_Max = "00000000000000000000001010011011"
	Counter_Width = "00000000000000000000000000001010"

Analyzing hierarchy for module <Packet_Gen> in library <work> with parameters.
	AssertBurstSize = "00000000000000000000000000101100"
	BackwardBurst = "101"
	CarSelectBurst = "010"
	CarSelectBurstSize = "00000000000000000000000000101100"
	DeAssertBurstSize = "00000000000000000000000000010110"
	ForwardBurst = "110"
	GapBurstSize = "00000000000000000000000000101000"
	GapInterval = "000"
	LeftBurst = "100"
	Pulse_Counter_Width = "00000000000000000000000000001000"
	RightBurst = "011"
	StartBurst = "001"
	StartBurstSize = "00000000000000000000000001011000"

Analyzing hierarchy for module <Packet_Gen> in library <work> with parameters.
	AssertBurstSize = "00000000000000000000000000101111"
	BackwardBurst = "101"
	CarSelectBurst = "010"
	CarSelectBurstSize = "00000000000000000000000000101111"
	DeAssertBurstSize = "00000000000000000000000000010110"
	ForwardBurst = "110"
	GapBurstSize = "00000000000000000000000000011001"
	GapInterval = "000"
	LeftBurst = "100"
	Pulse_Counter_Width = "00000000000000000000000000001000"
	RightBurst = "011"
	StartBurst = "001"
	StartBurstSize = "00000000000000000000000010111111"

Analyzing hierarchy for module <PulseGen> in library <work> with parameters.
	Counter_Max = "00000000000000000000001001110001"
	Counter_Width = "00000000000000000000000000001010"

Analyzing hierarchy for module <Packet_Gen> in library <work> with parameters.
	AssertBurstSize = "00000000000000000000000000101100"
	BackwardBurst = "101"
	CarSelectBurst = "010"
	CarSelectBurstSize = "00000000000000000000000000010110"
	DeAssertBurstSize = "00000000000000000000000000010110"
	ForwardBurst = "110"
	GapBurstSize = "00000000000000000000000000101000"
	GapInterval = "000"
	LeftBurst = "100"
	Pulse_Counter_Width = "00000000000000000000000000001000"
	RightBurst = "011"
	StartBurst = "001"
	StartBurstSize = "00000000000000000000000001011000"

Analyzing hierarchy for module <Counter> in library <work> with parameters.
	Counter_Max = "00000000000000000000001010110110"
	Counter_Width = "00000000000000000000000000001010"

Analyzing hierarchy for module <Counter> in library <work> with parameters.
	Counter_Max = "00000000000000000000001010011011"
	Counter_Width = "00000000000000000000000000001010"

Analyzing hierarchy for module <Counter> in library <work> with parameters.
	Counter_Max = "00000000000000000000001001110001"
	Counter_Width = "00000000000000000000000000001010"


=========================================================================
*                            HDL Analysis                               *
=========================================================================
Analyzing top module <Processor_Top>.
Module <Processor_Top> is correct for synthesis.
 
Analyzing module <Processor> in library <work>.
	CHOOSE_OPP = 8'b00000000
	DE_REFERENCE_0 = 8'b01110010
	DE_REFERENCE_A = 8'b01110000
	DE_REFERENCE_B = 8'b01110001
	DO_MATHS_OPP_0 = 8'b00110010
	DO_MATHS_OPP_SAVE_IN_A = 8'b00110000
	DO_MATHS_OPP_SAVE_IN_B = 8'b00110001
	FUNCTION_CALL = 8'b01100000
	GET_THREAD_START_ADDR_0 = 8'b11110001
	GET_THREAD_START_ADDR_1 = 8'b11110010
	GET_THREAD_START_ADDR_2 = 8'b11110011
	GOTO = 8'b01010000
	GOTO_0 = 8'b01010001
	GOTO_1 = 8'b01010010
	GOTO_IDLE = 8'b01010100
	IDLE = 8'b11110000
	IF_A_EQUALITY_B_GOTO = 8'b01000000
	IF_A_EQUALITY_B_GOTO_0 = 8'b01000001
	IF_A_EQUALITY_B_GOTO_1 = 8'b01000010
	NO_OP = 8'b10000100
	READ_FROM_MEM_0 = 8'b00010010
	READ_FROM_MEM_1 = 8'b00010011
	READ_FROM_MEM_2 = 8'b00010100
	READ_FROM_MEM_TO_A = 8'b00010000
	READ_FROM_MEM_TO_B = 8'b00010001
	RETURN = 8'b01100001
	WRITE_TO_MEM_0 = 8'b00100010
	WRITE_TO_MEM_FROM_A = 8'b00100000
	WRITE_TO_MEM_FROM_B = 8'b00100001
Module <Processor> is correct for synthesis.
 
Analyzing module <ALU> in library <work>.
Module <ALU> is correct for synthesis.
 
Analyzing module <RAM> in library <work>.
	RAMAddrWidth = 32'sb00000000000000000000000000000111
	RAMBaseAddr = 32'sb00000000000000000000000000000000
INFO:Xst:2546 - "RAM.v" line 46: reading initialization file "Complete_Demo_RAM3_LED.txt".
Module <RAM> is correct for synthesis.
 
Analyzing module <ROM> in library <work>.
	ROMAddrWidth = 32'sb00000000000000000000000000001000
INFO:Xst:2546 - "ROM.v" line 35: reading initialization file "Complete_Demo_ROM3_LED.txt".
Module <ROM> is correct for synthesis.
 
Analyzing module <IO_Bus_SevenSeg> in library <work>.
	AddrWidth = 32'sb00000000000000000000000000000001
	BaseAddr = 8'b11010000
INFO:Xst:2546 - "IO_Bus_SevenSeg.v" line 75: reading initialization file "SevenSeg.txt".
INFO:Xst:1433 - Contents of array <Mem> may be accessed with an index that exceeds the array size. This could cause simulation mismatch.
INFO:Xst:1433 - Contents of array <Mem> may be accessed with an index that exceeds the array size. This could cause simulation mismatch.
Module <IO_Bus_SevenSeg> is correct for synthesis.
 
Analyzing module <SevenSegmentDisplay> in library <work>.
Module <SevenSegmentDisplay> is correct for synthesis.
 
Analyzing module <IO_Bus_LEDs> in library <work>.
	BaseAddr = 8'b11000000
Module <IO_Bus_LEDs> is correct for synthesis.
 
Analyzing module <Timer> in library <work>.
	InitialInterruptEnable = 1'b1
	InitialInterruptRate = 32'sb00000000000000000000000001100100
	TimerBaseAddr = 8'b11110000
Module <Timer> is correct for synthesis.
 
Analyzing module <IO_Bus_Mouse> in library <work>.
	AddrWidth = 32'sb00000000000000000000000000000010
	BaseAddr = 8'b10100000
INFO:Xst:2546 - "IO_Bus_Mouse.v" line 91: reading initialization file "Mouse.txt".
Module <IO_Bus_Mouse> is correct for synthesis.
 
Analyzing module <MouseTransceiver> in library <work>.
	MouseLimitX = 8'b10100000
	MouseLimitY = 8'b01111000
Module <MouseTransceiver> is correct for synthesis.
 
Analyzing module <MouseTransmitter> in library <work>.
Module <MouseTransmitter> is correct for synthesis.
 
Analyzing module <MouseReceiver> in library <work>.
Module <MouseReceiver> is correct for synthesis.
 
Analyzing module <MouseMasterSM> in library <work>.
Module <MouseMasterSM> is correct for synthesis.
 
Analyzing module <CarSelect_MainFSM> in library <work>.
	BLUE = 4'b0010
	BaseAddr = 8'b10010000
	GREEN = 4'b0100
	RED = 4'b1000
	YELLOW = 4'b0001
Module <CarSelect_MainFSM> is correct for synthesis.
 
Analyzing module <Counter.1> in library <work>.
	Counter_Max = 32'sb00000000010011000100101101000000
	Counter_Width = 32'sb00000000000000000000000000010111
Module <Counter.1> is correct for synthesis.
 
Analyzing module <IR_Transmitter_SM.1> in library <work>.
	AssertBurstSize = 32'sb00000000000000000000000000110000
	BackwardLeft = 4'b0110
	BackwardRight = 4'b0101
	Backwards = 4'b0100
	CarSelectBurstSize = 32'sb00000000000000000000000000011000
	Counter_Max = 32'sb00000000000000000000001010110110
	Counter_Width = 32'sb00000000000000000000000000001010
	DeAssertBurstSize = 32'sb00000000000000000000000000011000
	ForwardLeft = 4'b1010
	ForwardRight = 4'b1001
	Forwards = 4'b1000
	Gap = 32'sb00000000000000000000000000011000
	IDLE = 4'b0000
	Left = 4'b0010
	Pulse_Counter_Width = 32'sb00000000000000000000000000001000
	Right = 4'b0001
	StartBurstSize = 32'sb00000000000000000000000011000000
Module <IR_Transmitter_SM.1> is correct for synthesis.
 
Analyzing module <PulseGen.1> in library <work>.
	Counter_Max = 32'sb00000000000000000000001010110110
	Counter_Width = 32'sb00000000000000000000000000001010
Module <PulseGen.1> is correct for synthesis.
 
Analyzing module <Counter.2> in library <work>.
	Counter_Max = 32'sb00000000000000000000001010110110
	Counter_Width = 32'sb00000000000000000000000000001010
Module <Counter.2> is correct for synthesis.
 
Analyzing module <Packet_Gen.1> in library <work>.
	AssertBurstSize = 32'sb00000000000000000000000000110000
	BackwardBurst = 3'b101
	CarSelectBurst = 3'b010
	CarSelectBurstSize = 32'sb00000000000000000000000000011000
	DeAssertBurstSize = 32'sb00000000000000000000000000011000
	ForwardBurst = 3'b110
	GapBurstSize = 32'sb00000000000000000000000000011000
	GapInterval = 3'b000
	LeftBurst = 3'b100
	Pulse_Counter_Width = 32'sb00000000000000000000000000001000
	RightBurst = 3'b011
	StartBurst = 3'b001
	StartBurstSize = 32'sb00000000000000000000000011000000
Module <Packet_Gen.1> is correct for synthesis.
 
Analyzing module <IR_Transmitter_SM.2> in library <work>.
	AssertBurstSize = 32'sb00000000000000000000000000101100
	BackwardLeft = 4'b0110
	BackwardRight = 4'b0101
	Backwards = 4'b0100
	CarSelectBurstSize = 32'sb00000000000000000000000000101100
	Counter_Max = 32'sb00000000000000000000001010011011
	Counter_Width = 32'sb00000000000000000000000000001010
	DeAssertBurstSize = 32'sb00000000000000000000000000010110
	ForwardLeft = 4'b1010
	ForwardRight = 4'b1001
	Forwards = 4'b1000
	Gap = 32'sb00000000000000000000000000101000
	IDLE = 4'b0000
	Left = 4'b0010
	Pulse_Counter_Width = 32'sb00000000000000000000000000001000
	Right = 4'b0001
	StartBurstSize = 32'sb00000000000000000000000001011000
Module <IR_Transmitter_SM.2> is correct for synthesis.
 
Analyzing module <PulseGen.2> in library <work>.
	Counter_Max = 32'sb00000000000000000000001010011011
	Counter_Width = 32'sb00000000000000000000000000001010
Module <PulseGen.2> is correct for synthesis.
 
Analyzing module <Counter.3> in library <work>.
	Counter_Max = 32'sb00000000000000000000001010011011
	Counter_Width = 32'sb00000000000000000000000000001010
Module <Counter.3> is correct for synthesis.
 
Analyzing module <Packet_Gen.2> in library <work>.
	AssertBurstSize = 32'sb00000000000000000000000000101100
	BackwardBurst = 3'b101
	CarSelectBurst = 3'b010
	CarSelectBurstSize = 32'sb00000000000000000000000000101100
	DeAssertBurstSize = 32'sb00000000000000000000000000010110
	ForwardBurst = 3'b110
	GapBurstSize = 32'sb00000000000000000000000000101000
	GapInterval = 3'b000
	LeftBurst = 3'b100
	Pulse_Counter_Width = 32'sb00000000000000000000000000001000
	RightBurst = 3'b011
	StartBurst = 3'b001
	StartBurstSize = 32'sb00000000000000000000000001011000
Module <Packet_Gen.2> is correct for synthesis.
 
Analyzing module <IR_Transmitter_SM.3> in library <work>.
	AssertBurstSize = 32'sb00000000000000000000000000101111
	BackwardLeft = 4'b0110
	BackwardRight = 4'b0101
	Backwards = 4'b0100
	CarSelectBurstSize = 32'sb00000000000000000000000000101111
	Counter_Max = 32'sb00000000000000000000001010110110
	Counter_Width = 32'sb00000000000000000000000000001010
	DeAssertBurstSize = 32'sb00000000000000000000000000010110
	ForwardLeft = 4'b1010
	ForwardRight = 4'b1001
	Forwards = 4'b1000
	Gap = 32'sb00000000000000000000000000011001
	IDLE = 4'b0000
	Left = 4'b0010
	Pulse_Counter_Width = 32'sb00000000000000000000000000001000
	Right = 4'b0001
	StartBurstSize = 32'sb00000000000000000000000010111111
Module <IR_Transmitter_SM.3> is correct for synthesis.
 
Analyzing module <Packet_Gen.3> in library <work>.
	AssertBurstSize = 32'sb00000000000000000000000000101111
	BackwardBurst = 3'b101
	CarSelectBurst = 3'b010
	CarSelectBurstSize = 32'sb00000000000000000000000000101111
	DeAssertBurstSize = 32'sb00000000000000000000000000010110
	ForwardBurst = 3'b110
	GapBurstSize = 32'sb00000000000000000000000000011001
	GapInterval = 3'b000
	LeftBurst = 3'b100
	Pulse_Counter_Width = 32'sb00000000000000000000000000001000
	RightBurst = 3'b011
	StartBurst = 3'b001
	StartBurstSize = 32'sb00000000000000000000000010111111
Module <Packet_Gen.3> is correct for synthesis.
 
Analyzing module <IR_Transmitter_SM.4> in library <work>.
	AssertBurstSize = 32'sb00000000000000000000000000101100
	BackwardLeft = 4'b0110
	BackwardRight = 4'b0101
	Backwards = 4'b0100
	CarSelectBurstSize = 32'sb00000000000000000000000000010110
	Counter_Max = 32'sb00000000000000000000001001110001
	Counter_Width = 32'sb00000000000000000000000000001010
	DeAssertBurstSize = 32'sb00000000000000000000000000010110
	ForwardLeft = 4'b1010
	ForwardRight = 4'b1001
	Forwards = 4'b1000
	Gap = 32'sb00000000000000000000000000101000
	IDLE = 4'b0000
	Left = 4'b0010
	Pulse_Counter_Width = 32'sb00000000000000000000000000001000
	Right = 4'b0001
	StartBurstSize = 32'sb00000000000000000000000001011000
Module <IR_Transmitter_SM.4> is correct for synthesis.
 
Analyzing module <PulseGen.3> in library <work>.
	Counter_Max = 32'sb00000000000000000000001001110001
	Counter_Width = 32'sb00000000000000000000000000001010
Module <PulseGen.3> is correct for synthesis.
 
Analyzing module <Counter.4> in library <work>.
	Counter_Max = 32'sb00000000000000000000001001110001
	Counter_Width = 32'sb00000000000000000000000000001010
Module <Counter.4> is correct for synthesis.
 
Analyzing module <Packet_Gen.4> in library <work>.
	AssertBurstSize = 32'sb00000000000000000000000000101100
	BackwardBurst = 3'b101
	CarSelectBurst = 3'b010
	CarSelectBurstSize = 32'sb00000000000000000000000000010110
	DeAssertBurstSize = 32'sb00000000000000000000000000010110
	ForwardBurst = 3'b110
	GapBurstSize = 32'sb00000000000000000000000000101000
	GapInterval = 3'b000
	LeftBurst = 3'b100
	Pulse_Counter_Width = 32'sb00000000000000000000000000001000
	RightBurst = 3'b011
	StartBurst = 3'b001
	StartBurstSize = 32'sb00000000000000000000000001011000
Module <Packet_Gen.4> is correct for synthesis.
 

=========================================================================
*                           HDL Synthesis                               *
=========================================================================

Performing bidirectional port resolution...

Synthesizing Unit <RAM>.
    Related source file is "RAM.v".
    Found 128x8-bit single-port RAM <Mram_Mem> for signal <Mem>.
    Found 8-bit tristate buffer for signal <BUS_DATA>.
    Found 8-bit comparator less for signal <CS$cmp_lt0000> created at line 51.
    Found 8-bit register for signal <Out>.
    Found 1-bit register for signal <RAMBusWE>.
    Summary:
	inferred   1 RAM(s).
	inferred   9 D-type flip-flop(s).
	inferred   1 Comparator(s).
	inferred   8 Tristate(s).
Unit <RAM> synthesized.


Synthesizing Unit <ROM>.
    Related source file is "ROM.v".
WARNING:Xst:1781 - Signal <ROM> is used but never assigned. Tied to default value.
    Found 256x8-bit ROM for signal <$varindex0000> created at line 39.
    Found 8-bit register for signal <DATA>.
    Summary:
	inferred   1 ROM(s).
	inferred   8 D-type flip-flop(s).
Unit <ROM> synthesized.


Synthesizing Unit <IO_Bus_LEDs>.
    Related source file is "IO_Bus_LEDs.v".
    Register <Out> equivalent to <LEDs> has been removed
    Found 8-bit tristate buffer for signal <BUS_DATA>.
    Found 8-bit register for signal <LEDs>.
    Found 1-bit register for signal <IOBusWE>.
    Found 8-bit register for signal <Mem>.
    Summary:
	inferred  17 D-type flip-flop(s).
	inferred   8 Tristate(s).
Unit <IO_Bus_LEDs> synthesized.


Synthesizing Unit <Timer>.
    Related source file is "Timer.v".
    Found 8-bit tristate buffer for signal <BUS_DATA>.
    Found 32-bit up counter for signal <DownCounter>.
    Found 1-bit register for signal <Interrupt>.
    Found 1-bit register for signal <InterruptEnable>.
    Found 8-bit register for signal <InterruptRate>.
    Found 32-bit register for signal <LastTime>.
    Found 32-bit comparator equal for signal <LastTime$cmp_eq0000> created at line 118.
    Found 1-bit register for signal <TargetReached>.
    Found 32-bit adder for signal <TargetReached$add0000> created at line 118.
    Found 32-bit comparator not equal for signal <TargetReached$cmp_ne0000> created at line 118.
    Found 32-bit up counter for signal <Timer>.
    Found 1-bit register for signal <TransmitTimerValue>.
    Summary:
	inferred   2 Counter(s).
	inferred  44 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
	inferred   2 Comparator(s).
	inferred   8 Tristate(s).
Unit <Timer> synthesized.


Synthesizing Unit <ALU>.
    Related source file is "ALU.v".
WARNING:Xst:643 - "ALU.v" line 46: The result of a 8x8-bit multiplication is partially used. Only the 8 least significant bits are used. If you are doing this on purpose, you may safely ignore this warning. Otherwise, make sure you are not losing information, leading to unexpected circuit behavior.
    Found 8-bit register for signal <Out>.
    Found 8-bit addsub for signal <Out$addsub0000>.
    Found 8-bit comparator equal for signal <Out$cmp_eq0010> created at line 63.
    Found 8-bit comparator greater for signal <Out$cmp_gt0000> created at line 65.
    Found 8-bit comparator less for signal <Out$cmp_lt0000> created at line 67.
    Found 8x8-bit multiplier for signal <Out$mult0001> created at line 46.
    Summary:
	inferred   8 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
	inferred   1 Multiplier(s).
	inferred   3 Comparator(s).
Unit <ALU> synthesized.


Synthesizing Unit <SevenSegmentDisplay>.
    Related source file is "SevenSegmentDisplay.v".
WARNING:Xst:653 - Signal <setdp> is used but never assigned. This sourceless signal will be automatically connected to value 0.
INFO:Xst:1799 - State 100 is never reached in FSM <digit>.
    Found finite state machine <FSM_0> for signal <digit>.
    -----------------------------------------------------------------------
    | States             | 4                                              |
    | Transitions        | 8                                              |
    | Inputs             | 4                                              |
    | Outputs            | 4                                              |
    | Clock              | CLK                       (rising_edge)        |
    | Power Up State     | 000                                            |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 16x8-bit ROM for signal <$old_cathode_4>.
    Found 20-bit register for signal <counter>.
    Found 20-bit adder for signal <counter$share0000>.
    Found 4-bit register for signal <data>.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred   1 ROM(s).
	inferred  24 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
Unit <SevenSegmentDisplay> synthesized.


Synthesizing Unit <MouseTransmitter>.
    Related source file is "MouseTransmitter.v".
    Found finite state machine <FSM_1> for signal <Curr_State>.
    -----------------------------------------------------------------------
    | States             | 11                                             |
    | Transitions        | 26                                             |
    | Inputs             | 6                                              |
    | Outputs            | 8                                              |
    | Clock              | CLK                       (rising_edge)        |
    | Reset              | RESET                     (positive)           |
    | Reset type         | synchronous                                    |
    | Reset State        | 0000                                           |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 1-bit register for signal <ClkMouseInDly>.
    Found 1-bit register for signal <Curr_ByteSent>.
    Found 8-bit register for signal <Curr_ByteToSend>.
    Found 1-bit register for signal <Curr_MouseClkOutWE>.
    Found 1-bit register for signal <Curr_MouseDataOut>.
    Found 1-bit register for signal <Curr_MouseDataOutWE>.
    Found 16-bit register for signal <Curr_SendCounter>.
    Found 1-bit xor8 for signal <Next_MouseDataOut$xor0000>.
    Found 16-bit adder for signal <Next_SendCounter$share0000> created at line 92.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred  29 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
	inferred   1 Multiplexer(s).
	inferred   1 Xor(s).
Unit <MouseTransmitter> synthesized.


Synthesizing Unit <MouseReceiver>.
    Related source file is "MouseReceiver.v".
    Found finite state machine <FSM_2> for signal <Curr_State>.
    -----------------------------------------------------------------------
    | States             | 5                                              |
    | Transitions        | 16                                             |
    | Inputs             | 6                                              |
    | Outputs            | 5                                              |
    | Clock              | CLK                       (rising_edge)        |
    | Reset              | RESET                     (positive)           |
    | Reset type         | synchronous                                    |
    | Reset State        | 000                                            |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 1-bit register for signal <ClkMouseInDly>.
    Found 4-bit register for signal <Curr_BitCounter>.
    Found 1-bit register for signal <Curr_ByteReceived>.
    Found 8-bit register for signal <Curr_MSCodeShiftReg>.
    Found 2-bit register for signal <Curr_MSCodeStatus>.
    Found 16-bit register for signal <Curr_TimeoutCounter>.
    Found 4-bit adder for signal <Next_BitCounter$addsub0000> created at line 114.
    Found 1-bit xor8 for signal <Next_MSCodeStatus_0$xor0000>.
    Found 1-bit xor2 for signal <Next_MSCodeStatus_0$xor0001> created at line 127.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred  32 D-type flip-flop(s).
	inferred   2 Adder/Subtractor(s).
	inferred   1 Xor(s).
Unit <MouseReceiver> synthesized.


Synthesizing Unit <MouseMasterSM>.
    Related source file is "MouseMasterSM.v".
    Found finite state machine <FSM_3> for signal <Curr_State>.
    -----------------------------------------------------------------------
    | States             | 13                                             |
    | Transitions        | 35                                             |
    | Inputs             | 8                                              |
    | Outputs            | 15                                             |
    | Clock              | CLK                       (rising_edge)        |
    | Reset              | RESET                     (positive)           |
    | Reset type         | synchronous                                    |
    | Reset State        | 0000                                           |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 8-bit register for signal <Curr_ByteToSend>.
    Found 24-bit register for signal <Curr_Counter>.
    Found 8-bit register for signal <Curr_Dx>.
    Found 8-bit register for signal <Curr_Dy>.
    Found 1-bit register for signal <Curr_ReadEnable>.
    Found 1-bit register for signal <Curr_SendByte>.
    Found 1-bit register for signal <Curr_SendInterrupt>.
    Found 8-bit register for signal <Curr_Status>.
    Found 26-bit register for signal <Curr_Timeout_Counter>.
    Found 24-bit adder for signal <Next_Counter$addsub0000> created at line 132.
    Found 26-bit adder for signal <Next_Timeout_Counter$addsub0000> created at line 274.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred  85 D-type flip-flop(s).
	inferred   2 Adder/Subtractor(s).
Unit <MouseMasterSM> synthesized.


Synthesizing Unit <Counter_1>.
    Related source file is "Counter.v".
    Found 23-bit register for signal <Counter>.
    Found 23-bit adder for signal <Counter$addsub0000> created at line 39.
    Found 1-bit register for signal <TriggerOut>.
    Summary:
	inferred  24 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
Unit <Counter_1> synthesized.


Synthesizing Unit <Packet_Gen_1>.
    Related source file is "Packet_Gen.v".
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_previous_state> of Case statement line 182 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_previous_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Using one-hot encoding for signal <packet_state>.
    Using one-hot encoding for signal <packet_previous_state>.
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_previous_state> of Case statement line 182 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_previous_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Found 1-bit register for signal <IR_Transmit>.
    Found 8-bit up counter for signal <j>.
    Found 1-bit register for signal <Packet_Finished_Flag>.
    Found 7-bit register for signal <packet_previous_state>.
    Found 7-bit register for signal <packet_state>.
    Found 9-bit comparator less for signal <packet_state$cmp_lt0000> created at line 87.
    Found 1-bit register for signal <Pulse_CNT_RST>.
    Summary:
	inferred   1 Counter(s).
	inferred   3 D-type flip-flop(s).
	inferred   1 Comparator(s).
Unit <Packet_Gen_1> synthesized.


Synthesizing Unit <Counter_2>.
    Related source file is "Counter.v".
    Found 10-bit register for signal <Counter>.
    Found 10-bit adder for signal <Counter$addsub0000> created at line 39.
    Found 1-bit register for signal <TriggerOut>.
    Summary:
	inferred  11 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
Unit <Counter_2> synthesized.


Synthesizing Unit <Packet_Gen_2>.
    Related source file is "Packet_Gen.v".
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_previous_state> of Case statement line 182 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_previous_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Using one-hot encoding for signal <packet_state>.
    Using one-hot encoding for signal <packet_previous_state>.
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_previous_state> of Case statement line 182 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_previous_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Found 1-bit register for signal <IR_Transmit>.
    Found 8-bit up counter for signal <j>.
    Found 1-bit register for signal <Packet_Finished_Flag>.
    Found 7-bit register for signal <packet_previous_state>.
    Found 7-bit register for signal <packet_state>.
    Found 8-bit comparator less for signal <packet_state$cmp_lt0000> created at line 87.
    Found 1-bit register for signal <Pulse_CNT_RST>.
    Summary:
	inferred   1 Counter(s).
	inferred   3 D-type flip-flop(s).
	inferred   1 Comparator(s).
Unit <Packet_Gen_2> synthesized.


Synthesizing Unit <Counter_3>.
    Related source file is "Counter.v".
    Found 10-bit register for signal <Counter>.
    Found 10-bit adder for signal <Counter$addsub0000> created at line 39.
    Found 1-bit register for signal <TriggerOut>.
    Summary:
	inferred  11 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
Unit <Counter_3> synthesized.


Synthesizing Unit <Packet_Gen_3>.
    Related source file is "Packet_Gen.v".
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_previous_state> of Case statement line 182 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_previous_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Using one-hot encoding for signal <packet_state>.
    Using one-hot encoding for signal <packet_previous_state>.
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_previous_state> of Case statement line 182 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_previous_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Found 1-bit register for signal <IR_Transmit>.
    Found 8-bit up counter for signal <j>.
    Found 1-bit register for signal <Packet_Finished_Flag>.
    Found 7-bit register for signal <packet_previous_state>.
    Found 7-bit register for signal <packet_state>.
    Found 9-bit comparator less for signal <packet_state$cmp_lt0000> created at line 87.
    Found 1-bit register for signal <Pulse_CNT_RST>.
    Summary:
	inferred   1 Counter(s).
	inferred   3 D-type flip-flop(s).
	inferred   1 Comparator(s).
Unit <Packet_Gen_3> synthesized.


Synthesizing Unit <Packet_Gen_4>.
    Related source file is "Packet_Gen.v".
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_previous_state> of Case statement line 182 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_previous_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Using one-hot encoding for signal <packet_state>.
    Using one-hot encoding for signal <packet_previous_state>.
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_previous_state> of Case statement line 182 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_previous_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
INFO:Xst:2117 - HDL ADVISOR - Mux Selector <packet_state> of Case statement line 85 was re-encoded using one-hot encoding. The case statement will be optimized (default statement optimization), but this optimization may lead to design initialization problems. To ensure the design works safely, you can:
   	- add an 'INIT' attribute on signal <packet_state> (optimization is then done without any risk)
   	- use the attribute 'signal_encoding user' to avoid onehot optimization
   	- use the attribute 'safe_implementation yes' to force XST to perform a safe (but less efficient) optimization
    Found 1-bit register for signal <IR_Transmit>.
    Found 8-bit up counter for signal <j>.
    Found 1-bit register for signal <Packet_Finished_Flag>.
    Found 7-bit register for signal <packet_previous_state>.
    Found 7-bit register for signal <packet_state>.
    Found 8-bit comparator less for signal <packet_state$cmp_lt0000> created at line 87.
    Found 1-bit register for signal <Pulse_CNT_RST>.
    Summary:
	inferred   1 Counter(s).
	inferred   3 D-type flip-flop(s).
	inferred   1 Comparator(s).
Unit <Packet_Gen_4> synthesized.


Synthesizing Unit <Counter_4>.
    Related source file is "Counter.v".
    Found 10-bit register for signal <Counter>.
    Found 10-bit adder for signal <Counter$addsub0000> created at line 39.
    Found 1-bit register for signal <TriggerOut>.
    Summary:
	inferred  11 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
Unit <Counter_4> synthesized.


Synthesizing Unit <Processor>.
    Related source file is "Processor.v".
INFO:Xst:1799 - State 01010100 is never reached in FSM <CurrState>.
    Found finite state machine <FSM_4> for signal <CurrState>.
    -----------------------------------------------------------------------
    | States             | 28                                             |
    | Transitions        | 45                                             |
    | Inputs             | 17                                             |
    | Outputs            | 23                                             |
    | Clock              | CLK                       (rising_edge)        |
    | Reset              | RESET                     (positive)           |
    | Reset type         | synchronous                                    |
    | Reset State        | 00000000                                       |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 8-bit tristate buffer for signal <BUS_DATA>.
    Found 8-bit adder for signal <ActualAddress>.
    Found 8-bit register for signal <CurrBusAddr>.
    Found 8-bit register for signal <CurrBusDataOut>.
    Found 1-bit register for signal <CurrBusDataOutWE>.
    Found 1-bit register for signal <CurrMouseInterruptAck>.
    Found 8-bit register for signal <CurrProgContext>.
    Found 8-bit register for signal <CurrProgCounter>.
    Found 2-bit register for signal <CurrProgCounterOffset>.
    Found 8-bit register for signal <CurrRegA>.
    Found 8-bit register for signal <CurrRegB>.
    Found 1-bit register for signal <CurrRegSelect>.
    Found 1-bit register for signal <CurrTimerInterruptAck>.
    Found 8-bit adder for signal <NextProgContext$add0000> created at line 462.
    Found 8-bit adder for signal <NextProgCounter$addsub0000>.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred  54 D-type flip-flop(s).
	inferred   3 Adder/Subtractor(s).
	inferred   8 Tristate(s).
Unit <Processor> synthesized.


Synthesizing Unit <IO_Bus_SevenSeg>.
    Related source file is "IO_Bus_SevenSeg.v".
    Found 8-bit tristate buffer for signal <BUS_DATA>.
    Found 8-bit comparator greatequal for signal <CS$cmp_ge0000> created at line 79.
    Found 8-bit comparator less for signal <CS$cmp_lt0000> created at line 79.
    Found 1-bit register for signal <IOBusWE>.
    Found 16-bit register for signal <Mem>.
    Found 8-bit register for signal <Out>.
    Found 16-bit register for signal <Seven_Seg>.
    Summary:
	inferred  41 D-type flip-flop(s).
	inferred   2 Comparator(s).
	inferred   8 Tristate(s).
Unit <IO_Bus_SevenSeg> synthesized.


Synthesizing Unit <MouseTransceiver>.
    Related source file is "MouseTransceiver.v".
    Found 4-bit register for signal <MouseStatus>.
    Found 1-bit tristate buffer for signal <DATA_MOUSE>.
    Found 8-bit register for signal <MouseX>.
    Found 8-bit register for signal <MouseY>.
    Found 1-bit tristate buffer for signal <CLK_MOUSE>.
    Found 1-bit register for signal <ClkMouseIn>.
    Found 8-bit register for signal <MouseClkFilter>.
    Found 9-bit adder for signal <MouseNewX>.
    Found 9-bit adder for signal <MouseNewY>.
    Found 10-bit comparator greater for signal <MouseX$cmp_gt0000> created at line 240.
    Found 10-bit comparator less for signal <MouseX$cmp_lt0000> created at line 238.
    Found 10-bit comparator greater for signal <MouseY$cmp_gt0000> created at line 252.
    Found 10-bit comparator less for signal <MouseY$cmp_lt0000> created at line 250.
    Summary:
	inferred  29 D-type flip-flop(s).
	inferred   2 Adder/Subtractor(s).
	inferred   4 Comparator(s).
	inferred   2 Tristate(s).
Unit <MouseTransceiver> synthesized.


Synthesizing Unit <PulseGen_1>.
    Related source file is "PulseGen.v".
    Found 1-bit register for signal <Pulse_Str>.
    Found 1-bit register for signal <Pulse_Trig>.
    Summary:
	inferred   2 D-type flip-flop(s).
Unit <PulseGen_1> synthesized.


Synthesizing Unit <PulseGen_2>.
    Related source file is "PulseGen.v".
    Found 1-bit register for signal <Pulse_Str>.
    Found 1-bit register for signal <Pulse_Trig>.
    Summary:
	inferred   2 D-type flip-flop(s).
Unit <PulseGen_2> synthesized.


Synthesizing Unit <PulseGen_3>.
    Related source file is "PulseGen.v".
    Found 1-bit register for signal <Pulse_Str>.
    Found 1-bit register for signal <Pulse_Trig>.
    Summary:
	inferred   2 D-type flip-flop(s).
Unit <PulseGen_3> synthesized.


Synthesizing Unit <IO_Bus_Mouse>.
    Related source file is "IO_Bus_Mouse.v".
    Found 8-bit tristate buffer for signal <BUS_DATA>.
    Found 8-bit comparator greatequal for signal <CS$cmp_ge0000> created at line 95.
    Found 8-bit comparator less for signal <CS$cmp_lt0000> created at line 95.
    Found 1-bit register for signal <Interrupt>.
    Found 1-bit register for signal <IOBusWE>.
    Found 32-bit register for signal <Mem>.
    Found 8-bit register for signal <Out>.
    Summary:
	inferred  42 D-type flip-flop(s).
	inferred   2 Comparator(s).
	inferred   8 Multiplexer(s).
	inferred   8 Tristate(s).
Unit <IO_Bus_Mouse> synthesized.


Synthesizing Unit <IR_Transmitter_SM_1>.
    Related source file is "IR_Transmitter_SM.v".
    Found finite state machine <FSM_5> for signal <command_reg_next_state>.
    -----------------------------------------------------------------------
    | States             | 9                                              |
    | Transitions        | 90                                             |
    | Inputs             | 9                                              |
    | Outputs            | 8                                              |
    | Clock              | CLK                       (rising_edge)        |
    | Reset              | command_reg_next_state$or0000 (positive)       |
    | Reset type         | synchronous                                    |
    | Reset State        | 0000                                           |
    | Power Up State     | 0000                                           |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 4-bit register for signal <command_reg_state>.
    Found 4-bit register for signal <i>.
    Found 4-bit adder for signal <i$addsub0000> created at line 57.
    Found 4-bit comparator less for signal <i$cmp_lt0000> created at line 56.
    Found 4-bit comparator less for signal <i$cmp_lt0001> created at line 55.
    Found 1-bit register for signal <Packet_Sequence_Finished_Flag>.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred   9 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
	inferred   2 Comparator(s).
Unit <IR_Transmitter_SM_1> synthesized.


Synthesizing Unit <IR_Transmitter_SM_2>.
    Related source file is "IR_Transmitter_SM.v".
    Found finite state machine <FSM_6> for signal <command_reg_next_state>.
    -----------------------------------------------------------------------
    | States             | 9                                              |
    | Transitions        | 90                                             |
    | Inputs             | 9                                              |
    | Outputs            | 8                                              |
    | Clock              | CLK                       (rising_edge)        |
    | Reset              | command_reg_next_state$or0000 (positive)       |
    | Reset type         | synchronous                                    |
    | Reset State        | 0000                                           |
    | Power Up State     | 0000                                           |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 4-bit register for signal <command_reg_state>.
    Found 4-bit register for signal <i>.
    Found 4-bit adder for signal <i$addsub0000> created at line 57.
    Found 4-bit comparator less for signal <i$cmp_lt0000> created at line 56.
    Found 4-bit comparator less for signal <i$cmp_lt0001> created at line 55.
    Found 1-bit register for signal <Packet_Sequence_Finished_Flag>.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred   9 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
	inferred   2 Comparator(s).
Unit <IR_Transmitter_SM_2> synthesized.


Synthesizing Unit <IR_Transmitter_SM_3>.
    Related source file is "IR_Transmitter_SM.v".
    Found finite state machine <FSM_7> for signal <command_reg_next_state>.
    -----------------------------------------------------------------------
    | States             | 9                                              |
    | Transitions        | 90                                             |
    | Inputs             | 9                                              |
    | Outputs            | 8                                              |
    | Clock              | CLK                       (rising_edge)        |
    | Reset              | command_reg_next_state$or0000 (positive)       |
    | Reset type         | synchronous                                    |
    | Reset State        | 0000                                           |
    | Power Up State     | 0000                                           |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 4-bit register for signal <command_reg_state>.
    Found 4-bit register for signal <i>.
    Found 4-bit adder for signal <i$addsub0000> created at line 57.
    Found 4-bit comparator less for signal <i$cmp_lt0000> created at line 56.
    Found 4-bit comparator less for signal <i$cmp_lt0001> created at line 55.
    Found 1-bit register for signal <Packet_Sequence_Finished_Flag>.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred   9 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
	inferred   2 Comparator(s).
Unit <IR_Transmitter_SM_3> synthesized.


Synthesizing Unit <IR_Transmitter_SM_4>.
    Related source file is "IR_Transmitter_SM.v".
    Found finite state machine <FSM_8> for signal <command_reg_next_state>.
    -----------------------------------------------------------------------
    | States             | 9                                              |
    | Transitions        | 90                                             |
    | Inputs             | 9                                              |
    | Outputs            | 8                                              |
    | Clock              | CLK                       (rising_edge)        |
    | Reset              | command_reg_next_state$or0000 (positive)       |
    | Reset type         | synchronous                                    |
    | Reset State        | 0000                                           |
    | Power Up State     | 0000                                           |
    | Encoding           | automatic                                      |
    | Implementation     | LUT                                            |
    -----------------------------------------------------------------------
    Found 4-bit register for signal <command_reg_state>.
    Found 4-bit register for signal <i>.
    Found 4-bit adder for signal <i$addsub0000> created at line 57.
    Found 4-bit comparator less for signal <i$cmp_lt0000> created at line 56.
    Found 4-bit comparator less for signal <i$cmp_lt0001> created at line 55.
    Found 1-bit register for signal <Packet_Sequence_Finished_Flag>.
    Summary:
	inferred   1 Finite State Machine(s).
	inferred   9 D-type flip-flop(s).
	inferred   1 Adder/Subtractor(s).
	inferred   2 Comparator(s).
Unit <IR_Transmitter_SM_4> synthesized.


Synthesizing Unit <CarSelect_MainFSM>.
    Related source file is "CarSelect_MainFSM.v".
    Found 1-bit register for signal <IR_LED>.
    Found 1-bit register for signal <b_pack_gen_EN>.
    Found 1-bit register for signal <b_pack_strobe>.
    Found 4-bit register for signal <Car_Sel>.
    Found 4-bit register for signal <COMMAND>.
    Found 1-bit register for signal <g_pack_gen_EN>.
    Found 1-bit register for signal <g_pack_strobe>.
    Found 1-bit register for signal <IDLE>.
    Found 1-bit register for signal <r_pack_gen_EN>.
    Found 1-bit register for signal <r_pack_strobe>.
    Found 1-bit register for signal <y_pack_gen_EN>.
    Found 1-bit register for signal <y_pack_strobe>.
    Summary:
	inferred  18 D-type flip-flop(s).
Unit <CarSelect_MainFSM> synthesized.


Synthesizing Unit <Processor_Top>.
    Related source file is "Processor_Top.v".
Unit <Processor_Top> synthesized.

INFO:Xst:1767 - HDL ADVISOR - Resource sharing has identified that some arithmetic operations in this design can share the same physical resources for reduced device utilization. For improved clock frequency you may try to disable resource sharing.

=========================================================================
HDL Synthesis Report

Macro Statistics
# RAMs                                                 : 1
 128x8-bit single-port RAM                             : 1
# ROMs                                                 : 2
 16x8-bit ROM                                          : 1
 256x8-bit ROM                                         : 1
# Multipliers                                          : 1
 8x8-bit multiplier                                    : 1
# Adders/Subtractors                                   : 22
 10-bit adder                                          : 4
 16-bit adder                                          : 2
 20-bit adder                                          : 1
 23-bit adder                                          : 1
 24-bit adder                                          : 1
 26-bit adder                                          : 1
 32-bit adder                                          : 1
 4-bit adder                                           : 5
 8-bit adder                                           : 3
 8-bit addsub                                          : 1
 9-bit adder                                           : 2
# Counters                                             : 6
 32-bit up counter                                     : 2
 8-bit up counter                                      : 4
# Registers                                            : 149
 1-bit register                                        : 87
 10-bit register                                       : 4
 16-bit register                                       : 2
 2-bit register                                        : 2
 20-bit register                                       : 1
 23-bit register                                       : 1
 24-bit register                                       : 1
 26-bit register                                       : 1
 32-bit register                                       : 1
 4-bit register                                        : 13
 7-bit register                                        : 8
 8-bit register                                        : 28
# Comparators                                          : 26
 10-bit comparator greater                             : 2
 10-bit comparator less                                : 2
 32-bit comparator equal                               : 1
 32-bit comparator not equal                           : 1
 4-bit comparator less                                 : 8
 8-bit comparator equal                                : 1
 8-bit comparator greatequal                           : 2
 8-bit comparator greater                              : 1
 8-bit comparator less                                 : 6
 9-bit comparator less                                 : 2
# Multiplexers                                         : 2
 1-bit 8-to-1 multiplexer                              : 1
 8-bit 4-to-1 multiplexer                              : 1
# Tristates                                            : 8
 1-bit tristate buffer                                 : 2
 8-bit tristate buffer                                 : 6
# Xors                                                 : 3
 1-bit xor2                                            : 1
 1-bit xor8                                            : 2

=========================================================================

=========================================================================
*                       Advanced HDL Synthesis                          *
=========================================================================

Analyzing FSM <FSM_8> for best encoding.
Optimizing FSM <CarSelect_MainFSM_0/YELLOW_CAR/command_reg_next_state/FSM> on signal <command_reg_next_state[1:9]> with one-hot encoding.
--------------------
 State | Encoding
--------------------
 0000  | 000000001
 1000  | 000000010
 0100  | 000000100
 0010  | 000001000
 0001  | 000010000
 1010  | 000100000
 1001  | 001000000
 0110  | 010000000
 0101  | 100000000
--------------------
Analyzing FSM <FSM_7> for best encoding.
Optimizing FSM <CarSelect_MainFSM_0/BLUE_CAR/command_reg_next_state/FSM> on signal <command_reg_next_state[1:9]> with one-hot encoding.
--------------------
 State | Encoding
--------------------
 0000  | 000000001
 1000  | 000000010
 0100  | 000000100
 0010  | 000001000
 0001  | 000010000
 1010  | 000100000
 1001  | 001000000
 0110  | 010000000
 0101  | 100000000
--------------------
Analyzing FSM <FSM_6> for best encoding.
Optimizing FSM <CarSelect_MainFSM_0/GREEN_CAR/command_reg_next_state/FSM> on signal <command_reg_next_state[1:9]> with one-hot encoding.
--------------------
 State | Encoding
--------------------
 0000  | 000000001
 1000  | 000000010
 0100  | 000000100
 0010  | 000001000
 0001  | 000010000
 1010  | 000100000
 1001  | 001000000
 0110  | 010000000
 0101  | 100000000
--------------------
Analyzing FSM <FSM_5> for best encoding.
Optimizing FSM <CarSelect_MainFSM_0/RED_CAR/command_reg_next_state/FSM> on signal <command_reg_next_state[1:9]> with one-hot encoding.
--------------------
 State | Encoding
--------------------
 0000  | 000000001
 1000  | 000000010
 0100  | 000000100
 0010  | 000001000
 0001  | 000010000
 1010  | 000100000
 1001  | 001000000
 0110  | 010000000
 0101  | 100000000
--------------------
Analyzing FSM <FSM_4> for best encoding.
Optimizing FSM <cpu/CurrState/FSM> on signal <CurrState[1:28]> with one-hot encoding.
------------------------------------------
 State    | Encoding
------------------------------------------
 00000000 | 0000000000000000000000000001
 00010000 | 0000000000000000000000100000
 00010001 | 0000000000000000000001000000
 00010010 | 0000000001000000000000000000
 00010011 | 0000000010000000000000000000
 00010100 | 0000000100000000000000000000
 00100000 | 0000000000000000000010000000
 00100001 | 0000000000000000000100000000
 00100010 | 0000001000000000000000000000
 00110000 | 0000000000000000001000000000
 00110001 | 0000000000000000010000000000
 00110010 | 0000010000000000000000000000
 01000000 | 0000000000000000100000000000
 01000001 | 0000100000000000000000000000
 01000010 | 0001000000000000000000000000
 01010000 | 0000000000000001000000000000
 01010001 | 0010000000000000000000000000
 01010010 | 0100000000000000000000000000
 01010100 | unreached
 01100000 | 0000000000000010000000000000
 01100001 | 0000000000000100000000000000
 01110000 | 0000000000001000000000000000
 01110001 | 0000000000010000000000000000
 01110010 | 1000000000000000000000000000
 10000100 | 0000000000100000000000000000
 11110000 | 0000000000000000000000000100
 11110001 | 0000000000000000000000000010
 11110010 | 0000000000000000000000001000
 11110011 | 0000000000000000000000010000
------------------------------------------
Analyzing FSM <FSM_3> for best encoding.
Optimizing FSM <MouseBus/mouse/MSM/Curr_State/FSM> on signal <Curr_State[1:13]> with one-hot encoding.
------------------------
 State | Encoding
------------------------
 0000  | 0000000000001
 0001  | 0000000000010
 0010  | 0000000000100
 0011  | 0000000001000
 0100  | 0000000010000
 0101  | 0000000100000
 0110  | 0000001000000
 0111  | 0000010000000
 1000  | 0000100000000
 1001  | 0001000000000
 1010  | 0010000000000
 1011  | 0100000000000
 1100  | 1000000000000
------------------------
Analyzing FSM <FSM_2> for best encoding.
Optimizing FSM <MouseBus/mouse/R/Curr_State/FSM> on signal <Curr_State[1:3]> with gray encoding.
-------------------
 State | Encoding
-------------------
 000   | 000
 001   | 001
 010   | 011
 011   | 010
 100   | 110
-------------------
Analyzing FSM <FSM_1> for best encoding.
Optimizing FSM <MouseBus/mouse/T/Curr_State/FSM> on signal <Curr_State[1:11]> with one-hot encoding.
----------------------
 State | Encoding
----------------------
 0000  | 00000000001
 0001  | 00000000010
 0010  | 00000000100
 0011  | 00000001000
 0100  | 00000010000
 0101  | 00000100000
 0110  | 00001000000
 0111  | 00010000000
 1000  | 00100000000
 1001  | 01000000000
 1010  | 10000000000
----------------------
Analyzing FSM <FSM_0> for best encoding.
Optimizing FSM <SevenSegBus/SevenSegDisplay/digit/FSM> on signal <digit[1:2]> with gray encoding.
-------------------
 State | Encoding
-------------------
 000   | 00
 001   | 01
 010   | 11
 011   | 10
 100   | unreached
-------------------
WARNING:Xst:1710 - FF/Latch <CurrProgCounterOffset_1> (without init value) has a constant value of 0 in block <cpu>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:2404 -  FFs/Latches <CurrProgCounterOffset<1:1>> (without init value) have a constant value of 0 in block <Processor>.

Synthesizing (advanced) Unit <Processor>.
	Found pipelined multiplier on signal <ALU0/Out_mult0001>:
		- 1 pipeline level(s) found in a register on signal <CurrRegA>.
		Pushing register(s) into the multiplier macro.

		- 1 pipeline level(s) found in a register on signal <CurrRegB>.
		Pushing register(s) into the multiplier macro.
INFO:Xst:2385 - HDL ADVISOR - You can improve the performance of the multiplier ALU0/Mmult_Out_mult0001 by adding 1 register level(s).
Unit <Processor> synthesized (advanced).

Synthesizing (advanced) Unit <RAM>.
INFO:Xst:3226 - The RAM <Mram_Mem> will be implemented as a BLOCK RAM, absorbing the following register(s): <Out>
    -----------------------------------------------------------------------
    | ram_type           | Block                               |          |
    -----------------------------------------------------------------------
    | Port A                                                              |
    |     aspect ratio   | 128-word x 8-bit                    |          |
    |     mode           | read-first                          |          |
    |     clkA           | connected to signal <CLK>           | rise     |
    |     weA            | connected to signal <BUS_WE_0>      | high     |
    |     addrA          | connected to signal <BUS_ADDR>      |          |
    |     diA            | connected to signal <BUS_DATA>      |          |
    |     doA            | connected to signal <Out>           |          |
    -----------------------------------------------------------------------
    | optimization       | speed                               |          |
    -----------------------------------------------------------------------
Unit <RAM> synthesized (advanced).

Synthesizing (advanced) Unit <ROM>.
INFO:Xst:3044 - The ROM <Mrom__varindex0000> will be implemented as a read-only BLOCK RAM, absorbing the register: <DATA>.
INFO:Xst:3225 - The RAM <Mrom__varindex0000> will be implemented as BLOCK RAM
    -----------------------------------------------------------------------
    | ram_type           | Block                               |          |
    -----------------------------------------------------------------------
    | Port A                                                              |
    |     aspect ratio   | 256-word x 8-bit                    |          |
    |     mode           | write-first                         |          |
    |     clkA           | connected to signal <CLK>           | rise     |
    |     weA            | connected to internal node          | high     |
    |     addrA          | connected to signal <ADDR>          |          |
    |     diA            | connected to internal node          |          |
    |     doA            | connected to signal <DATA>          |          |
    -----------------------------------------------------------------------
    | optimization       | speed                               |          |
    -----------------------------------------------------------------------
Unit <ROM> synthesized (advanced).

Synthesizing (advanced) Unit <SevenSegmentDisplay>.
INFO:Xst:3034 - In order to maximize performance and save block RAM resources, the small ROM <Mrom__old_cathode_4> will be implemented on LUT. If you want to force its implementation on block, use option/constraint rom_style.
Unit <SevenSegmentDisplay> synthesized (advanced).

=========================================================================
Advanced HDL Synthesis Report

Macro Statistics
# RAMs                                                 : 2
 128x8-bit single-port block RAM                       : 1
 256x8-bit single-port block RAM                       : 1
# ROMs                                                 : 1
 16x8-bit ROM                                          : 1
# Multipliers                                          : 1
 8x8-bit registered multiplier                         : 1
# Adders/Subtractors                                   : 22
 10-bit adder                                          : 4
 16-bit adder                                          : 2
 20-bit adder                                          : 1
 23-bit adder                                          : 1
 24-bit adder                                          : 1
 26-bit adder                                          : 1
 32-bit adder                                          : 1
 4-bit adder                                           : 5
 8-bit adder                                           : 3
 8-bit addsub                                          : 1
 9-bit adder                                           : 2
# Counters                                             : 6
 32-bit up counter                                     : 2
 8-bit up counter                                      : 4
# Registers                                            : 692
 Flip-Flops                                            : 692
# Comparators                                          : 26
 10-bit comparator greater                             : 2
 10-bit comparator less                                : 2
 32-bit comparator equal                               : 1
 32-bit comparator not equal                           : 1
 4-bit comparator less                                 : 8
 8-bit comparator equal                                : 1
 8-bit comparator greatequal                           : 2
 8-bit comparator greater                              : 1
 8-bit comparator less                                 : 6
 9-bit comparator less                                 : 2
# Multiplexers                                         : 2
 1-bit 8-to-1 multiplexer                              : 1
 8-bit 4-to-1 multiplexer                              : 1
# Xors                                                 : 3
 1-bit xor2                                            : 1
 1-bit xor8                                            : 2

=========================================================================

=========================================================================
*                         Low Level Synthesis                           *
=========================================================================
WARNING:Xst:2040 - Unit Processor_Top: 8 multi-source signals are replaced by logic (pull-up yes): BUS_DATA<0>, BUS_DATA<1>, BUS_DATA<2>, BUS_DATA<3>, BUS_DATA<4>, BUS_DATA<5>, BUS_DATA<6>, BUS_DATA<7>.
WARNING:Xst:2042 - Unit IO_Bus_LEDs: 8 internal tristates are replaced by logic (pull-up yes): BUS_DATA<0>, BUS_DATA<1>, BUS_DATA<2>, BUS_DATA<3>, BUS_DATA<4>, BUS_DATA<5>, BUS_DATA<6>, BUS_DATA<7>.
WARNING:Xst:2042 - Unit Processor: 8 internal tristates are replaced by logic (pull-up yes): BUS_DATA<0>, BUS_DATA<1>, BUS_DATA<2>, BUS_DATA<3>, BUS_DATA<4>, BUS_DATA<5>, BUS_DATA<6>, BUS_DATA<7>.

Optimizing unit <Processor_Top> ...
WARNING:Xst:1710 - FF/Latch <MouseBus/mouse/MouseY_7> (without init value) has a constant value of 0 in block <Processor_Top>. This FF/Latch will be trimmed during the optimization process.
WARNING:Xst:1710 - FF/Latch <MouseBus/mouse/MouseY_7> (without init value) has a constant value of 0 in block <Processor_Top>. This FF/Latch will be trimmed during the optimization process.

Optimizing unit <SevenSegmentDisplay> ...

Optimizing unit <MouseTransmitter> ...

Optimizing unit <MouseReceiver> ...

Optimizing unit <MouseMasterSM> ...

Optimizing unit <Counter_1> ...

Optimizing unit <Counter_2> ...

Optimizing unit <Counter_3> ...

Optimizing unit <Counter_4> ...

Optimizing unit <Packet_Gen_1> ...

Optimizing unit <Packet_Gen_2> ...

Optimizing unit <Packet_Gen_3> ...

Optimizing unit <Packet_Gen_4> ...

Optimizing unit <IR_Transmitter_SM_1> ...

Optimizing unit <IR_Transmitter_SM_2> ...

Optimizing unit <IR_Transmitter_SM_3> ...

Optimizing unit <IR_Transmitter_SM_4> ...

Optimizing unit <CarSelect_MainFSM> ...

Mapping all equations...
Building and optimizing final netlist ...
INFO:Xst:2261 - The FF/Latch <MouseBus/mouse/T/ClkMouseInDly> in Unit <Processor_Top> is equivalent to the following FF/Latch, which will be removed : <MouseBus/mouse/R/ClkMouseInDly> 
Found area constraint ratio of 100 (+ 5) on block Processor_Top, actual ratio is 90.

Final Macro Processing ...

=========================================================================
Final Register Report

Macro Statistics
# Registers                                            : 786
 Flip-Flops                                            : 786

=========================================================================

=========================================================================
*                           Partition Report                            *
=========================================================================

Partition Implementation Status
-------------------------------

  No Partitions were found in this design.

-------------------------------

=========================================================================
*                            Final Report                               *
=========================================================================
Final Results
RTL Top Level Output File Name     : Processor_Top.ngr
Top Level Output File Name         : Processor_Top
Output Format                      : NGC
Optimization Goal                  : Speed
Keep Hierarchy                     : No

Design Statistics
# IOs                              : 25

Cell Usage :
# BELS                             : 2334
#      BUF                         : 1
#      GND                         : 1
#      INV                         : 24
#      LUT1                        : 249
#      LUT2                        : 135
#      LUT2_D                      : 4
#      LUT2_L                      : 7
#      LUT3                        : 366
#      LUT3_D                      : 7
#      LUT3_L                      : 19
#      LUT4                        : 646
#      LUT4_D                      : 62
#      LUT4_L                      : 45
#      MUXCY                       : 365
#      MUXF5                       : 74
#      MUXF6                       : 1
#      VCC                         : 1
#      XORCY                       : 327
# FlipFlops/Latches                : 786
#      FD                          : 88
#      FDC                         : 63
#      FDCE                        : 100
#      FDE                         : 53
#      FDP                         : 4
#      FDPE                        : 12
#      FDR                         : 262
#      FDRE                        : 119
#      FDRS                        : 50
#      FDRSE                       : 6
#      FDS                         : 19
#      FDSE                        : 10
# RAMS                             : 2
#      RAMB16_S9                   : 2
# Clock Buffers                    : 1
#      BUFGP                       : 1
# IO Buffers                       : 24
#      IBUF                        : 1
#      IOBUF                       : 2
#      OBUF                        : 21
# MULTs                            : 1
#      MULT18X18SIO                : 1
=========================================================================

Device utilization summary:
---------------------------

Selected Device : 3s100ecp132-5 

 Number of Slices:                      824  out of    960    85%  
 Number of Slice Flip Flops:            786  out of   1920    40%  
 Number of 4 input LUTs:               1564  out of   1920    81%  
 Number of IOs:                          25
 Number of bonded IOBs:                  25  out of     83    30%  
 Number of BRAMs:                         2  out of      4    50%  
 Number of MULT18X18SIOs:                 1  out of      4    25%  
 Number of GCLKs:                         1  out of     24     4%  

---------------------------
Partition Resource Summary:
---------------------------

  No Partitions were found in this design.

---------------------------


=========================================================================
TIMING REPORT

NOTE: THESE TIMING NUMBERS ARE ONLY A SYNTHESIS ESTIMATE.
      FOR ACCURATE TIMING INFORMATION PLEASE REFER TO THE TRACE REPORT
      GENERATED AFTER PLACE-and-ROUTE.

Clock Information:
------------------
-----------------------------------+------------------------+-------+
Clock Signal                       | Clock buffer(FF name)  | Load  |
-----------------------------------+------------------------+-------+
CLK                                | BUFGP                  | 789   |
-----------------------------------+------------------------+-------+

Asynchronous Control Signals Information:
----------------------------------------
---------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------+-------+
Control Signal                                                                                                 | Buffer(FF name)                                                            | Load  |
---------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------+-------+
RESET                                                                                                          | IBUF                                                                       | 107   |
CarSelect_MainFSM_0/BLUE_CAR/PulseGenerator/_or0000(CarSelect_MainFSM_0/BLUE_CAR/PulseGenerator/_or00001:O)    | NONE(CarSelect_MainFSM_0/BLUE_CAR/PulseGenerator/Clock_Counter/Counter_0)  | 10    |
CarSelect_MainFSM_0/GREEN_CAR/PulseGenerator/_or0000(CarSelect_MainFSM_0/GREEN_CAR/PulseGenerator/_or00001:O)  | NONE(CarSelect_MainFSM_0/GREEN_CAR/PulseGenerator/Clock_Counter/Counter_0) | 10    |
CarSelect_MainFSM_0/RED_CAR/PulseGenerator/_or0000(CarSelect_MainFSM_0/RED_CAR/PulseGenerator/_or00001:O)      | NONE(CarSelect_MainFSM_0/RED_CAR/PulseGenerator/Clock_Counter/Counter_0)   | 10    |
CarSelect_MainFSM_0/YELLOW_CAR/PulseGenerator/_or0000(CarSelect_MainFSM_0/YELLOW_CAR/PulseGenerator/_or00001:O)| NONE(CarSelect_MainFSM_0/YELLOW_CAR/PulseGenerator/Clock_Counter/Counter_0)| 10    |
CarSelect_MainFSM_0/BLUE_CAR/Pack_Gen/Pulse_CNT_RST(CarSelect_MainFSM_0/BLUE_CAR/Pack_Gen/Pulse_CNT_RST:Q)     | NONE(CarSelect_MainFSM_0/BLUE_CAR/Pack_Gen/j_0)                            | 8     |
CarSelect_MainFSM_0/GREEN_CAR/Pack_Gen/Pulse_CNT_RST(CarSelect_MainFSM_0/GREEN_CAR/Pack_Gen/Pulse_CNT_RST:Q)   | NONE(CarSelect_MainFSM_0/GREEN_CAR/Pack_Gen/j_0)                           | 8     |
CarSelect_MainFSM_0/RED_CAR/Pack_Gen/Pulse_CNT_RST(CarSelect_MainFSM_0/RED_CAR/Pack_Gen/Pulse_CNT_RST:Q)       | NONE(CarSelect_MainFSM_0/RED_CAR/Pack_Gen/j_0)                             | 8     |
CarSelect_MainFSM_0/YELLOW_CAR/Pack_Gen/Pulse_CNT_RST(CarSelect_MainFSM_0/YELLOW_CAR/Pack_Gen/Pulse_CNT_RST:Q) | NONE(CarSelect_MainFSM_0/YELLOW_CAR/Pack_Gen/j_0)                          | 8     |
---------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------+-------+

Timing Summary:
---------------
Speed Grade: -5

   Minimum period: 8.868ns (Maximum Frequency: 112.761MHz)
   Minimum input arrival time before clock: 6.492ns
   Maximum output required time after clock: 5.691ns
   Maximum combinational path delay: No path found

Timing Detail:
--------------
All values displayed in nanoseconds (ns)

=========================================================================
Timing constraint: Default period analysis for Clock 'CLK'
  Clock period: 8.868ns (frequency: 112.761MHz)
  Total number of paths / destination ports: 61327 / 1287
-------------------------------------------------------------------------
Delay:               8.868ns (Levels of Logic = 10)
  Source:            rom/Mrom__varindex0000 (RAM)
  Destination:       cpu/ALU0/Out_7 (FF)
  Source Clock:      CLK rising
  Destination Clock: CLK rising

  Data Path: rom/Mrom__varindex0000 to cpu/ALU0/Out_7
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     RAMB16_S9:CLK->DO5   20   2.436   1.089  rom/Mrom__varindex0000 (ROM_DATA<5>)
     LUT2_D:I0->O          6   0.612   0.572  cpu/ALU0/Out_or000031 (N50)
     LUT4:I3->O            1   0.612   0.360  cpu/ALU0/Maddsub_Out_addsub0000_lut<2>_SW1 (N304)
     LUT4:I3->O            1   0.612   0.000  cpu/ALU0/Maddsub_Out_addsub0000_lut<2> (cpu/ALU0/Maddsub_Out_addsub0000_lut<2>)
     MUXCY:S->O            1   0.404   0.000  cpu/ALU0/Maddsub_Out_addsub0000_cy<2> (cpu/ALU0/Maddsub_Out_addsub0000_cy<2>)
     MUXCY:CI->O           1   0.052   0.000  cpu/ALU0/Maddsub_Out_addsub0000_cy<3> (cpu/ALU0/Maddsub_Out_addsub0000_cy<3>)
     MUXCY:CI->O           1   0.052   0.000  cpu/ALU0/Maddsub_Out_addsub0000_cy<4> (cpu/ALU0/Maddsub_Out_addsub0000_cy<4>)
     MUXCY:CI->O           1   0.052   0.000  cpu/ALU0/Maddsub_Out_addsub0000_cy<5> (cpu/ALU0/Maddsub_Out_addsub0000_cy<5>)
     MUXCY:CI->O           0   0.052   0.000  cpu/ALU0/Maddsub_Out_addsub0000_cy<6> (cpu/ALU0/Maddsub_Out_addsub0000_cy<6>)
     XORCY:CI->O           1   0.699   0.387  cpu/ALU0/Maddsub_Out_addsub0000_xor<7> (cpu/ALU0/Out_addsub0000<7>)
     LUT3:I2->O            1   0.612   0.000  cpu/ALU0/Out_mux0000<7>271 (cpu/ALU0/Out_mux0000<7>27)
     FDRS:D                    0.268          cpu/ALU0/Out_7
    ----------------------------------------
    Total                      8.868ns (6.461ns logic, 2.407ns route)
                                       (72.9% logic, 27.1% route)

=========================================================================
Timing constraint: Default OFFSET IN BEFORE for Clock 'CLK'
  Total number of paths / destination ports: 683 / 539
-------------------------------------------------------------------------
Offset:              6.492ns (Levels of Logic = 3)
  Source:            RESET (PAD)
  Destination:       timer1/DownCounter_0 (FF)
  Destination Clock: CLK rising

  Data Path: RESET to timer1/DownCounter_0
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     IBUF:I->O           252   1.106   1.132  RESET_IBUF (RESET_IBUF)
     BUF:I->O            253   0.612   1.162  RESET_IBUF_1 (RESET_IBUF_1)
     LUT3:I2->O           32   0.612   1.073  timer1/DownCounter_or0000167 (timer1/DownCounter_or0000)
     FDR:R                     0.795          timer1/DownCounter_0
    ----------------------------------------
    Total                      6.492ns (3.125ns logic, 3.367ns route)
                                       (48.1% logic, 51.9% route)

=========================================================================
Timing constraint: Default OFFSET OUT AFTER for Clock 'CLK'
  Total number of paths / destination ports: 48 / 22
-------------------------------------------------------------------------
Offset:              5.691ns (Levels of Logic = 2)
  Source:            SevenSegBus/SevenSegDisplay/digit_FSM_FFd1 (FF)
  Destination:       AN2 (PAD)
  Source Clock:      CLK rising

  Data Path: SevenSegBus/SevenSegDisplay/digit_FSM_FFd1 to AN2
                                Gate     Net
    Cell:in->out      fanout   Delay   Delay  Logical Name (Net Name)
    ----------------------------------------  ------------
     FD:C->Q              15   0.514   1.016  SevenSegBus/SevenSegDisplay/digit_FSM_FFd1 (SevenSegBus/SevenSegDisplay/digit_FSM_FFd1)
     LUT2:I0->O            2   0.612   0.380  SevenSegBus/SevenSegDisplay/anode<2>1 (AN2_OBUF)
     OBUF:I->O                 3.169          AN2_OBUF (AN2)
    ----------------------------------------
    Total                      5.691ns (4.295ns logic, 1.396ns route)
                                       (75.5% logic, 24.5% route)

=========================================================================


Total REAL time to Xst completion: 27.00 secs
Total CPU time to Xst completion: 27.21 secs
 
--> 

Total memory usage is 316340 kilobytes

Number of errors   :    0 (   0 filtered)
Number of warnings :   10 (   0 filtered)
Number of infos    :   39 (   0 filtered)

