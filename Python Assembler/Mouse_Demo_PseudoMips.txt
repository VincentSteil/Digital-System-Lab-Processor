Processor_Init
idle

Mouse_ISR
lw A 21 // Set default colours - Cursor
sw A B3
lw A 20 // Set default colours - background 
sw A B4
lw A A1 // Load Mouse_X into A
sw A B0 // Save Mouse_X to VGA reg X
lw A A3	//load scroll	- DELETE after inserting code for changing backround colour for each car
sw A D0 // Update SevenSeg registers X with scroll state
lw B A2 // Load Mouse_Y into B
li A 77 // Load 120 into A
sw B D1 // Update SevenSeg Y
sub A B B // 120 - Mouse_Y to invert position / movement
sw B B1 // Save Mouse_Y to VGA reg Y
li A 01 
sw A B2 // Set VGA data current
lw A A0 // Load Mouse_Status into A
sw A C0 // Update LED's
idle

Timer_ISR
lw A A0 // load Mouse_Status
li B 01 // load 0001
and A B A // bit mask bit 0 -> left mouse button
beq A B Mouse_Clicked_Timer
lw A A3 //load scroll position
lw B 1D //load previous scroll position
beq A B goto_idle //see if scroll has been changed
goto scroll_change
idle

goto_idle
sw B 1E						//it has to be different than FF so that scroll detection to work
idle

scroll_change
sw A 1D						//save scroll position for future compare
li B FF						//indicate a scroll change has happened
sw B 1E						//register to indicate a scroll change has happened
goto Mouse_Clicked_Timer

Mouse_Clicked_Timer				
lw A A3					//load scroll position
li B 0F					//load mask 00001111
and A B A				//get 4 LSBs of scroll
li B 03					
blt A B Red				//check if scroll is Red
li B 07
blt A B Green			//check if scroll is Green
li B 0B
blt A B Blue			//check if scroll is Blue
goto Yellow 			//check if scroll is Yellow

Red
li A 00 		
sw A 1C				//store pointer to initial Red Instruction
li A 03			//change colour - background 
sw A 21				//change colour - background
li A FF				//check for scroll change
lw B 1E
beq A B goto_idle
goto Get_X

Green
li A 07 
sw A 1C				//store pointer to initial Green Instruction
li A 12 			//change colour - background
sw A 21				//change colour - background
li A FF				//check for scroll change
lw B 1E	
beq A B goto_idle
goto Get_X

Blue
li A 0E 
sw A 1C				//store pointer to initial Blue Instruction
li A E0			//change colour - background
sw A 21				//change colour - background
li A FF				//check for scroll change
lw B 1E
beq A B goto_idle
goto Get_X

Yellow
li A 15
sw A 1C				//store pointer to initial Yellow Instruction
li A 1C 			//change colour - background
sw A 21				//change colour - background
li A FF				//check for scroll change
lw B 1E
beq A B goto_idle
goto Get_X

Get_X
lw A A1 				//load mouse_X in regA
li B 35 				//load regB with 53(dec value)
blt A B X_L_53			//is mouse_x less than 53?
li B 6A 				//load B with 106(dec value)
blt A B 53_X_106		//is mouse_x less than 106?
goto 106_X_160

106_X_160 				//mouse_x is between 106 and 160
lw A A2 				//load mouse_Y in regA
li B 28 				//load B with 40(dec value)
blt A B BackwardRight 	//goto BackwardRight
li B 50					//load B with 80(dec value)
blt A B ForwardRight 	//goto ForwardRight
goto ForwardRight		//else goto ForwardRight

X_L_53					//mouse_x is less than 53
lw A A2 				//load mouse_Y in regA
li B 28 				//load B with 40(dec value)
blt A B BackwardLeft 	//goto BackwardLeft
li B 50					//load B with 80(dec value)
blt A B ForwardLeft 	//goto ForwardLeft
goto ForwardLeft		//else goto ForwardLeft

53_X_106				//mouse_x is between 53 and 160
lw A A2 				//load mouse_Y in regA
li B 28 				//load B with 40(dec value)
blt A B Backward 		//goto Backward
li B 50					//load B with 80(dec value)
blt A B BRAKE 			//goto BRAKE
goto Forward			//else goto Forward

BRAKE 
lw A 1C 				//load pointer to initial direction instruction
li B 06					
add A B A				//add offset for direction instruction
deref A
sw A 90 				//write new direction
idle

Forward
lw A 1C 				//load pointer to initial direction instruction
deref A					//no offset needed because Forward is the initial direction instruction for each car
sw A 90 				//write new direction
idle

Backward
lw A 1C 				//load pointer to initial direction instruction
li B 01
add A B A				//add offset for direction instruction
deref A
sw A 90 				//write new direction
idle

ForwardLeft
lw A 1C					//load pointer to initial direction instruction 				
li B 02
add A B A				//add offset for direction instruction
deref A
sw A 90 				//write new direction
idle

ForwardRight
lw A 1C					//load pointer to initial direction instruction 				
li B 03
add A B A				//add offset for direction instruction
deref A
sw A 90 				//write new direction
idle

BackwardLeft
lw A 1C					//load pointer to initial direction instruction 				
li B 04
add A B A				//add offset for direction instruction
deref A
sw A 90 				//write new direction
idle

BackwardRight
lw A 1C					//load pointer to initial direction instruction 				
li B 05
add A B A				//add offset for direction instruction
deref A
sw A 90 				//write new direction
idle
